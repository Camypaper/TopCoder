using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using Debug = System.Diagnostics.Debug;
using StringBuilder = System.Text.StringBuilder;
public class BalancedSubstrings
{
    public int countSubstrings(string s)
    {
        s
        var dp = new int[2500][];
        for (int i = 0; i < 2500; i++)
            dp[i] = new int[2500];
        var n = s.Length;
        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
                dp[j][i] = dp[j - 1][i] + (s[j] - '0') * (j - i);
            for (int j = i - 1; j >= 0; j--)
                dp[j][i] = dp[j + 1][i] + (s[j] - '0') * (i - j);
        }
        var res = 0;
        for (int i = 0; i < n; i++)
            for (int j = i; j < n; j++)
                for (int k = i; k <= j; k++)
                {
                    if (dp[i][k] == dp[j][k])
                    {
                        res++;
                        break;
                    }
                }
        return res;

    }

}
// CUT begin
public class Tester : AbstractTester
{
    public override void Test()
    {

        base.Test();
    }
}
// CUT end

